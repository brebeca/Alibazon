const request   = require('request');
const config= require('../config');
const utils=require('../utils/utils-functions');

/**
 * makes a get request to get the products for the subcategory
 * in case of error calls reject with the error
 * checks if the is iterable
 * for each object calls the function getImgPath to get the path to the medium image
 * calls resolve with the final array of products
 * @param subcategoryID       the id for the requested subcategory
 * @returns {Promise<unknown>}
 */
exports.getProductsForSubcategory=  (subcategoryID) =>{
    return new Promise((resolve, reject)=> {
        request({
                url: config.baseURL+'products/product_search?primary_category_id='+subcategoryID+'&secretKey='+config.secretKEY,
                method: 'GET'
            },
            function (error, response) {
                if (error) {
                    reject({error:error});
                } else {
                    let products=JSON.parse(response.body);
                    if(products.error!==undefined){
                        reject({error:products.error});
                    }
                    else {
                        if (utils.isIterable(products))
                            products.forEach(function (item, index) {
                                item.img_path = utils.getImgPath(item, index,'medium');
                            });
                        resolve(products);
                    }
                }
            });
    });

}


/**
 * makes a get request to get a product by it s id
 * in case of error calls reject with the error
 * calls the getImgPath with the large parameter to get the large image path for the product
 * calls resolve with the requested product
 * @param ID                 the id of the requested product
 * @returns {Promise<unknown>}
 */
exports.getProductByID =  (ID) =>{
    return new Promise((resolve, reject)=> {
        request({
                url: config.baseURL+'products/product_search?id='+ID+'&secretKey='+config.secretKEY,
                method: 'GET'
            },
            function (error, response) {
                if (error) {
                    reject({error:error});
                } else {
                    let product=JSON.parse(response.body);
                    if(product.error!==undefined){
                        reject({error:product.error});
                    }
                    else {
                        product[0].img_path = utils.getImgPath(product[0], 0,'large');
                        resolve(product[0]);
                    }
                }
            });
    });
}
