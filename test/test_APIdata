const chai= require('chai'),
    chaiHttp= require('chai-http'),
    dataForTests=require('./test-data'),
    secretData=require('./SECRET');

chai.should();
chai.use(chaiHttp);

describe("API data tests", ()=>{

     it(" all categories of level 2 in an array ",async ()=>{
         const allCAtegories=  await  dataForTests.categoryAPIfunctions.getAllCategories(secretData.baseURL,secretData.secretKEY);
         chai.expect(allCAtegories).to.be.an('array');
     });

     it(" products for a subcategory - existing subcategory- in an array of objects with property img_path", (done)=> {
         dataForTests.productsAPIfunctions.getProductsForSubcategory(dataForTests.subcategory,
             secretData.baseURL,secretData.secretKEY)
             .then((products) => {
                 chai.expect(products).to.be.an('array');
                 products.forEach((item, index) => {
                 chai.expect(item).to.have.property('img_path');
                 });
                 done();
             }).catch(err => done(err));
     });

     it(" products for a subcategory -  NONexisting subcategory- in an array of objects with property img_path", (done)=> {
         dataForTests.productsAPIfunctions.getProductsForSubcategory('not-a-subcategory',
             secretData.baseURL,secretData.secretKEY)
             .then(()=>{
                 done(new Error('Expected method to reject.'))
             }).catch(err =>{
                 chai.expect(err).to.have.property('error');
                 done();
             });
     });

     it(" get product by id - existing id ", (done)=> {
         dataForTests.productsAPIfunctions.getProductByID(dataForTests.productID,1,
             secretData.baseURL,secretData.secretKEY)
             .then((product) => {
                 //console.log(product);
                 chai.expect(product).to.have.property('imagePath');
                 done();
             }).catch(err => done(new Error('Method reject. '+ err)));
     });

     it(" get product by id - NONexisting id ", (done)=> {
         dataForTests.productsAPIfunctions.getProductByID('not-an-id',
             secretData.baseURL,secretData.secretKEY)
             .then(()=>{
                 done(new Error('Expected method to reject.'));
             }).catch(err => {
                 chai.expect(err).to.have.property('error');
                 done();
         });
     });

     it(" get subcategories by parentID- existing parentID ", (done)=> {
         dataForTests.subcategoryAPIfunctions.getSubcategories(dataForTests.parentID,
             secretData.baseURL,secretData.secretKEY)
             .then((subcategories) => {
             chai.expect(subcategories).to.be.an('array');
             done();
             }).catch(err => done(new Error('Method reject.')));
     });

     it(" get subcategories by parentID -NONexisting parentID ", (done)=> {
         dataForTests.subcategoryAPIfunctions.getSubcategories('not-a-parent-id',
             secretData.baseURL,secretData.secretKEY)
             .then(() => {
                 done(new Error('Expected method to reject.'));
             }).catch(err => {
             chai.expect(err).to.have.property('error');
             done();
             });
     });


     it(" get subcategory s  parent - existing subcategory ", (done)=> {
         dataForTests.subcategoryAPIfunctions.getCurrentCategoryParent(dataForTests.subcategory,
             secretData.baseURL,secretData.secretKEY)
             .then((parent) => {
                 chai.expect(parent).to.be.an('string');
                 done();
             }).catch(err => done(err));
     });

     it(" get subcategory s  parent -NONexisting subcategory ", (done)=> {
         dataForTests.subcategoryAPIfunctions.getCurrentCategoryParent('not-a-subcategory',
             secretData.baseURL,secretData.secretKEY)
             .then(() => {
                 done(new Error('Expected method to reject.'));
             }).catch(err => {
             chai.expect(err).to.have.property('error');
             done();
         });
     });
 });


describe("API data AUTH tests ", ()=> {

    it(" Login test real acount ",  (done ) => {
        dataForTests.loginAPI.login(dataForTests.userLogin.email, dataForTests.userLogin.password,
            secretData.baseURL,secretData.secretKEY)
            .then((response)=>{
                chai.expect(response).to.be.instanceOf(dataForTests.UserModel);
                done();
            })
            .catch(err => done(new Error('Method  rejected.')));
    });

    it(" Login test nonexisting acount ",  (done ) => {
        dataForTests.loginAPI.login(dataForTests.userLogin.notanemail, dataForTests.userLogin.notapassword,
            secretData.baseURL,secretData.secretKEY)
            .then((response)=>{
                done(new Error('Expected method to reject.'));
            })
            .catch(err => done());
    });

    it(" SignUp test existing account ",  (done ) => {
        dataForTests.signUpAIP.signUp(dataForTests.userSignup.email, dataForTests.userSignup.password, dataForTests.userSignup.name,
            secretData.baseURL,secretData.secretKEY)
            .then((response)=>{
                done(new Error('Expected method to reject.'));
            })
            .catch(err => done());
    });

})


describe("API data CART tests",()=>{
    it(" POST cart, add a product to a cart  ",  (done ) => {
        dataForTests.cartAPI.add(dataForTests.productID,dataForTests.variantID,1,secretData.aToken,
            secretData.baseURL,secretData.secretKEY)
            .then((response)=>{
                chai.expect(response).to.have.property('message');
                chai.expect(response.message).to.eql('Product added');
                done();
            })
            .catch((err)=>{
                //console.log(err);
                done(new Error('Method  rejected.'))
            })
    });

    it(" GET cart for a user", (done)=>{
        dataForTests.cartAPI.get(secretData.aToken,secretData.baseURL,secretData.secretKEY)
            .then((response)=>{
                chai.expect(response).to.be.an('array');
                done();
            })
            .catch((err)=>{
                console.log(err);
                done(new Error('Method  rejected.'))
            })
    });

    it(" GET cart for a user with wrong token", (done)=>{
        dataForTests.cartAPI.get('not-a-token',secretData.baseURL,secretData.secretKEY)
            .then((response)=>{
                //chai.expect(response).to.be.an('array');
                done(new Error('Expected to fail.'))
            })
            .catch((err)=>{
               // console.log(err);
                done();
            })
    });

    it("POST cart, add product to NONexisting cart ", (done)=>{
        dataForTests.cartAPI.add(dataForTests.productID,dataForTests.variantID,1,'not-a-token',
            secretData.baseURL,secretData.secretKEY)
            .then((response)=>{
                done(new Error('Method  rejected.'));
            })
            .catch((err)=>{
               // console.log(err);
                chai.expect(err).to.have.property('error');
                chai.expect(err.error).to.eql('Invalid Token');
                done();
            })
    })
})