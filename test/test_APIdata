const chai= require('chai'),
    chaiHttp= require('chai-http'),
    server= require('../app'),
    roots= require('../utils/categories-utils')
    ,loginAPI= require('../APIdata/authAPI/login'),
    signUpAIP= require('../APIdata/authAPI/signup'),
    productsAPIfunctions = require('../APIdata/products'),
    subcategoryAPIfunctions=require('../APIdata/subcategories'),
    parentID='mens-accessories',
    subcategory = 'mens-accessories-ties',
    categoryAPIfunctions=require('../APIdata/get-categories'),
    productID='69309284',
    {userLogin} =require('./useraccount'),
    {userSignup} =require('./useraccount'),
    {UserModel}=require('../utils/models/userModel');

chai.should();
chai.use(chaiHttp);

 describe("API data tests", ()=>{

     it(" all categories of level 2 in an array ",async ()=>{
         const allCAtegories=  await  categoryAPIfunctions.getAllCategories();
         chai.expect(allCAtegories).to.be.an('array');
     });

     it(" products for a subcategory - existing subcategory- in an array of objects with property img_path", (done)=> {
         productsAPIfunctions.getProductsForSubcategory(subcategory)
             .then((products) => {
                 chai.expect(products).to.be.an('array');
                 products.forEach((item, index) => {
                 chai.expect(item).to.have.property('img_path');
                 });
                 done();
             }).catch(err => done(err));
     });

     it(" products for a subcategory -  NONexisting subcategory- in an array of objects with property img_path", (done)=> {
         productsAPIfunctions.getProductsForSubcategory('not-a-subcategory')
             .then(()=>{
                 done(new Error('Expected method to reject.'))
             }).catch(err =>{
                 chai.expect(err).to.have.property('error');
                 done();
             });
     });

     it(" get product by id - existing id ", (done)=> {
         productsAPIfunctions.getProductByID(productID)
             .then((product) => {
                 chai.expect(product).to.have.property('img_path');
                 done();
             }).catch(err => done(err));
     });

     it(" get product by id - NONexisting id ", (done)=> {
         productsAPIfunctions.getProductByID('not-an-id')
             .then(()=>{
                 done(new Error('Expected method to reject.'));
             }).catch(err => {
                 chai.expect(err).to.have.property('error');
                 done();
         });
     });

     it(" get subcategories by parentID- existing parentID ", (done)=> {
         subcategoryAPIfunctions.getSubcategories(parentID)
             .then((subcategories) => {
             chai.expect(subcategories).to.be.an('array');
             done();
             }).catch(err => done(err));
     });

     it(" get subcategories by parentID -NONexisting parentID ", (done)=> {
         subcategoryAPIfunctions.getSubcategories('not-a-parent-id')
             .then(() => {
                 done(new Error('Expected method to reject.'));
             }).catch(err => {
             chai.expect(err).to.have.property('error');
             done();
             });
     });


     it(" get subcategory s  parent - existing subcategory ", (done)=> {
         subcategoryAPIfunctions.getCurrentCategoryParent(subcategory)
             .then((parent) => {
                 chai.expect(parent).to.be.an('string');
                 done();
             }).catch(err => done(err));
     });

     it(" get subcategory s  parent -NONexisting subcategory ", (done)=> {
         subcategoryAPIfunctions.getCurrentCategoryParent('not-a-subcategory')
             .then(() => {
                 done(new Error('Expected method to reject.'));
             }).catch(err => {
             chai.expect(err).to.have.property('error');
             done();
         });
     });
 });




describe("API data AUTH tests ", ()=> {

    it(" Login test real acount ",  (done ) => {
        loginAPI.login(userLogin.email, userLogin.password)
            .then((response)=>{
                chai.expect(response).to.be.instanceOf(UserModel);
                done();
            })
            .catch(err => done(err));
    });

    it(" Login test nonexisting acount ",  (done ) => {
        loginAPI.login(userLogin.notanemail, userLogin.notapassword)
            .then((response)=>{
                done(new Error('Expected method to reject.'));
            })
            .catch(err => done());
    });

    it(" SignUp test existing account ",  (done ) => {
        signUpAIP.signUp(userSignup.email, userSignup.password, userSignup.name)
            .then((response)=>{
                done(new Error('Expected method to reject.'));
            })
            .catch(err => done());
    });

})